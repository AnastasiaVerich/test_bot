import {Bot} from "grammy";
import {handleStartCommand} from "./callback/command_start";
import {ScenesOperator} from "../scenes";
import {handleChatidCommand} from "./callback/command_chatid";
import {handleMessageForward} from "./callback/message_forward";
import {getActiveSurveyByUserId, updateActiveSurveyIsJoinedToChat} from "../../database/queries/surveyQueries";
import {BUTTONS_CALLBACK_QUERIES} from "../../bot-common/constants/buttons";
import {FinishSurveyKeyboard} from "../../bot-common/keyboards/inlineKeyboard";
import {MyContext} from "../../bot-common/types/type";
import logger from "../../lib/logger";


export function registerCommands(bot: Bot<MyContext>): void {
    bot.chatType("private").command("start", handleStartCommand);
    bot.command("chatid", handleChatidCommand);
}

export function registerCallbackQueries(bot: Bot<MyContext>): void {
    bot.chatType("private").callbackQuery(
        BUTTONS_CALLBACK_QUERIES.RegistrationButton,
        async (ctx: MyContext) => {
            await ctx.conversation.enter(ScenesOperator.RegisterScene);
        },
    );
    bot.chatType("private").callbackQuery(
        BUTTONS_CALLBACK_QUERIES.FinishSurveyButton,
        async (ctx: MyContext) => {
            logger.info(1)
            await ctx.conversation.enter(ScenesOperator.FinishSurveyScene);
        },
    );
}

export function registerMessage(bot: Bot<MyContext>): void {
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.chatType("private").on("message:forward_origin", async (ctx: MyContext) => {
        await handleMessageForward(ctx, bot)
    });
}

//–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –î–õ–Ø –ë–û–¢–ê –°–î–õ–ï–ê–¢–¨ –ù–ê–°–¢–†–û–ô–ö–£ Group Privacy
export function registerChatEvents(bot: Bot<MyContext>): void {
    bot.on("chat_member", async (ctx) => {
        logger.info('chat_member')
        const chatMemberUpdate = ctx.chatMember;
        const newStatus = chatMemberUpdate.new_chat_member.status;
        const user = chatMemberUpdate.new_chat_member.user;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
        if (newStatus === "member") {
            const chatId = chatMemberUpdate.chat.id;
            const userFirstName = user.first_name;
            logger.info(chatId)
            logger.info(user)
            const active_survey = await getActiveSurveyByUserId(user.id)
            if(!active_survey){
                await ctx.api.sendMessage(
                    chatId,
                    `–¢–µ–±—è —Ç—É—Ç –Ω–µ –∂–¥–∞–ª–∏.`
                );
                return
            }

            await updateActiveSurveyIsJoinedToChat(true, active_survey?.survey_active_id)
            await bot.api.sendMessage(active_survey.operator_id, '–í—ã—Å–ª–∞–ª —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ (—Å–ø–∏—Å–æ–∫ –Ω–µ –≥–æ—Ç–æ–≤).')
            await bot.api.sendMessage(active_survey.operator_id, '–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.',
                {reply_markup:FinishSurveyKeyboard()})
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ctx.api.sendMessage(
                chatId,
                `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É, ${userFirstName}! üéâ`
            );
        }
    });
}


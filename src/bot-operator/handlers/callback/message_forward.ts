import {getUserId} from "../../utils/getUserId";
import {MessageOrigin} from "@grammyjs/types/message";
import {channelId} from "../../../config/env";
import {
    getActiveSurveyByMessageID,
    getSurveyActiveInfo, getSurveyInformations,
    updateActiveSurveyOperatorId
} from "../../../database/queries/surveyQueries";
import {findOperator} from "../../../database/queries/operatorQueries";
import {Bot} from "grammy";
import {MESSAGE_OPERATOR_FROWARD} from "../../../bot-common/constants/handler_message";
import {MyContext} from "../../../bot-common/types/type";
import logger from "../../../lib/logger";
import {FinishSurveyKeyboard} from "../../../bot-common/keyboards/inlineKeyboard";


export  const handleMessageForward = async (ctx: MyContext,bot: Bot<MyContext>)=>{
    const userId = await getUserId(ctx)
    if(!userId)return
    const forwardOrigin:MessageOrigin | undefined = ctx.message?.forward_origin;
    if (!forwardOrigin) return;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞
    if (
        forwardOrigin.type === "channel" &&
        forwardOrigin.chat.id.toString() === channelId
    ) {
        const messageId = forwardOrigin.message_id;
        if(!messageId) return
        const active_survey = await getActiveSurveyByMessageID(messageId)
        if(!active_survey) return

        if(active_survey.operator_id){
            return ctx.reply(MESSAGE_OPERATOR_FROWARD.BUSY)
        }

        const operator = await findOperator(userId,null,null)
        if(!operator){
            return
            //—á—Ç–æ-—Ç–æ –ø—Ä–∏–¥—É–º–∞—Ç—å.
        }

        await updateActiveSurveyOperatorId(userId,active_survey.survey_active_id)

        await ctx.reply(`${MESSAGE_OPERATOR_FROWARD.SUCCESS}`)
        const surveyActive = await getSurveyActiveInfo(active_survey.survey_active_id)
        const surveyActiveTasks = await getSurveyInformations(active_survey.survey_id)


        if(!surveyActive)return
        let message = [
            `<b>üìã –û–ø—Ä–æ—Å</b>`,
            //`<b>üìã –û–ø—Ä–æ—Å: ${surveyActive.topic}</b>`,
            //`<b>–¢–∏–ø:</b> ${surveyActive.survey_type}`,
            //`<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${surveyActive.description}`,
            `<b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è:</b> ${surveyActive.region_name}`,
            `<b>–¶–µ–Ω–∞ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ:</b> ${surveyActive.task_price}`,
            `<b>–í—Ä–µ–º—è —Ä–µ–∑–µ—Ä–≤–∞:</b> ${surveyActive.reservation_time_min} –º–∏–Ω`,
            `` // Empty line for spacing
        ].join('\n');

        message += '\n\n<b>üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n';
        surveyActiveTasks.forEach((task, index) => {
            message += `<b>${task.label}:</b> ${task.description}\n`;
        });
        await ctx.reply(`${message}`, {parse_mode:'HTML'})

        await ctx.reply('–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.',
            {reply_markup:FinishSurveyKeyboard()})

        // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ (–¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)

        try {
            logger.info(5)
            await bot.api.deleteMessage(channelId, messageId);
            logger.info(`–°–æ–æ–±—â–µ–Ω–∏–µ ${messageId} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞ ${channelId} –¥–ª—è –≤—Å–µ—Ö`);
        } catch (error: any) {
            logger.info(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}:`, error.message);
            await ctx.reply(
                `–û–ø–µ—Ä–∞—Ç–æ—Ä ${userId} –Ω–∞–∑–Ω–∞—á–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`
            );
            return;
        }
    }
}
